/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SurveyManagerInterface extends ethers.utils.Interface {
  functions: {
    "access(bytes32,address)": FunctionFragment;
    "addSurvey(string,string,uint256,bool)": FunctionFragment;
    "addUsers(bytes32,address[])": FunctionFragment;
    "sendSurvey(bytes32,uint16[])": FunctionFragment;
    "surveys(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "access",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSurvey",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addUsers",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSurvey",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "surveys", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "access", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSurvey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendSurvey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "surveys", data: BytesLike): Result;

  events: {
    "Authorised(address,bytes32)": EventFragment;
    "NewSurvey(address,bytes32)": EventFragment;
    "SentSurvey(bytes32,uint16[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSurvey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentSurvey"): EventFragment;
}

export class SurveyManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SurveyManagerInterface;

  functions: {
    access(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "access(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    addSurvey(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addSurvey(string,string,uint256,bool)"(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addUsers(bytes32,address[])"(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sendSurvey(bytes32,uint16[])"(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    surveys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      surveyTitle: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: boolean;
    }>;

    "surveys(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      surveyTitle: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: boolean;
    }>;
  };

  access(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "access(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  addSurvey(
    _title: string,
    _surveyTitle: string,
    _time: BigNumberish,
    _ispublic: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addSurvey(string,string,uint256,bool)"(
    _title: string,
    _surveyTitle: string,
    _time: BigNumberish,
    _ispublic: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addUsers(
    _survey: BytesLike,
    users: string[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addUsers(bytes32,address[])"(
    _survey: BytesLike,
    users: string[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sendSurvey(
    _survey: BytesLike,
    _feedback: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sendSurvey(bytes32,uint16[])"(
    _survey: BytesLike,
    _feedback: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  surveys(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    title: string;
    surveyTitle: string;
    author: string;
    time: BigNumber;
    isPublic: boolean;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: boolean;
  }>;

  "surveys(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    title: string;
    surveyTitle: string;
    author: string;
    time: BigNumber;
    isPublic: boolean;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: boolean;
  }>;

  callStatic: {
    access(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "access(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    addSurvey(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "addSurvey(string,string,uint256,bool)"(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addUsers(bytes32,address[])"(
      _survey: BytesLike,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "sendSurvey(bytes32,uint16[])"(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    surveys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      surveyTitle: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: boolean;
    }>;

    "surveys(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      title: string;
      surveyTitle: string;
      author: string;
      time: BigNumber;
      isPublic: boolean;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: boolean;
    }>;
  };

  filters: {
    Authorised(user: string | null, hash: null): EventFilter;

    NewSurvey(user: string | null, hash: null): EventFilter;

    SentSurvey(hash: BytesLike | null, answers: null): EventFilter;
  };

  estimateGas: {
    access(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "access(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSurvey(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addSurvey(string,string,uint256,bool)"(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addUsers(bytes32,address[])"(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sendSurvey(bytes32,uint16[])"(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    surveys(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "surveys(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    access(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "access(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSurvey(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addSurvey(string,string,uint256,bool)"(
      _title: string,
      _surveyTitle: string,
      _time: BigNumberish,
      _ispublic: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addUsers(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addUsers(bytes32,address[])"(
      _survey: BytesLike,
      users: string[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sendSurvey(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sendSurvey(bytes32,uint16[])"(
      _survey: BytesLike,
      _feedback: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    surveys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surveys(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
